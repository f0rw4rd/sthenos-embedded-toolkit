name: Create Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - 'full'      # All tools, all architectures
          - 'popular'   # Core tools, popular architectures  
          - 'custom'    # Custom selection
      custom_tools:
        description: 'Custom tools (comma-separated, only if release_type=custom)'
        required: false
        default: 'strace,busybox,bash,socat,ncat,tcpdump'
        type: string
      custom_architectures:
        description: 'Custom architectures (comma-separated, only if release_type=custom)'
        required: false
        default: 'x86_64,aarch64,arm32v7le,mips32le'
        type: string
      tag_name:
        description: 'Release tag name (e.g., v1.0.0)'
        required: true
        type: string
      release_name:
        description: 'Release title (optional, defaults to "Sthenos <tag>")'
        required: false
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      draft:
        description: 'Create as draft release'
        required: false
        default: false
        type: boolean

jobs:
  # First job - trigger the build workflow and wait for completion
  trigger-build:
    runs-on: ubuntu-latest
    outputs:
      run_id: ${{ steps.trigger.outputs.run_id }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup build parameters
      id: setup
      run: |
        case "${{ github.event.inputs.release_type }}" in
          full)
            TOOLS="all"
            ARCHITECTURES="all"
            ;;
          popular)
            TOOLS="strace,busybox,bash,socat,ncat,tcpdump,gdbserver,nmap,ply,dropbear"
            ARCHITECTURES="x86_64,aarch64,arm32v5le,arm32v7le,arm32v7lehf,armv6,mips32be,mips32le,ppc32be,ppc64le,riscv64,i486"
            ;;
          custom)
            TOOLS="${{ github.event.inputs.custom_tools }}"
            ARCHITECTURES="${{ github.event.inputs.custom_architectures }}"
            ;;
        esac
        
        echo "tools=$TOOLS" >> $GITHUB_OUTPUT
        echo "architectures=$ARCHITECTURES" >> $GITHUB_OUTPUT
        
        echo "Building release with:"
        echo "- Tools: $TOOLS"  
        echo "- Architectures: $ARCHITECTURES"

    - name: Trigger build workflow
      id: trigger
      run: |
        echo "Triggering build workflow for release..."
        
        RESPONSE=$(gh workflow run build-all.yml \
          --field architectures="${{ steps.setup.outputs.architectures }}" \
          --field tools="${{ steps.setup.outputs.tools }}" \
          --field create_release=false \
          --json)
        
        # Get the run ID of the triggered workflow
        sleep 5  # Wait a moment for the run to be created
        
        RUN_ID=$(gh run list --workflow=build-all.yml --limit=1 --json databaseId --jq '.[0].databaseId')
        echo "run_id=$RUN_ID" >> $GITHUB_OUTPUT
        echo "Triggered build workflow with run ID: $RUN_ID"
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Wait for build completion
      run: |
        echo "Waiting for build workflow to complete..."
        RUN_ID="${{ steps.trigger.outputs.run_id }}"
        
        # Wait for the workflow to complete (max 4 hours)
        TIMEOUT=14400  # 4 hours in seconds
        ELAPSED=0
        
        while [ $ELAPSED -lt $TIMEOUT ]; do
          STATUS=$(gh run view $RUN_ID --json status --jq '.status')
          CONCLUSION=$(gh run view $RUN_ID --json conclusion --jq '.conclusion')
          
          echo "Build status: $STATUS, conclusion: $CONCLUSION"
          
          if [ "$STATUS" = "completed" ]; then
            if [ "$CONCLUSION" = "success" ]; then
              echo "‚úÖ Build completed successfully!"
              break
            else
              echo "‚ùå Build failed with conclusion: $CONCLUSION"
              exit 1
            fi
          fi
          
          echo "Build still running... waiting 2 minutes"
          sleep 120
          ELAPSED=$((ELAPSED + 120))
        done
        
        if [ $ELAPSED -ge $TIMEOUT ]; then
          echo "‚ùå Build timed out after 4 hours"
          exit 1
        fi
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Second job - download artifacts and create release
  create-release:
    needs: trigger-build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      run: |
        echo "Downloading artifacts from build workflow..."
        RUN_ID="${{ needs.trigger-build.outputs.run_id }}"
        
        # Create directory for artifacts
        mkdir -p release-artifacts
        
        # Download all artifacts from the build run
        gh run download $RUN_ID --dir release-artifacts/
        
        echo "Downloaded artifacts:"
        find release-artifacts -type f | head -20
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Prepare release assets
      run: |
        mkdir -p final-release
        
        # Find all .tar.gz files and copy to final release directory
        find release-artifacts -name "*.tar.gz" -exec cp {} final-release/ \;
        find release-artifacts -name "*.tar.gz.sha256" -exec cp {} final-release/ \;
        
        echo "Release assets prepared:"
        ls -la final-release/
        
        # Create master checksum file
        cd final-release
        if ls *.tar.gz 1> /dev/null 2>&1; then
          sha256sum *.tar.gz > CHECKSUMS.sha256
          echo "Created master checksum file"
        else
          echo "No .tar.gz files found for checksums"
        fi
        cd ..

    - name: Generate release notes
      id: release_notes
      run: |
        # Determine release name
        if [ -n "${{ github.event.inputs.release_name }}" ]; then
          RELEASE_NAME="${{ github.event.inputs.release_name }}"
        else
          RELEASE_NAME="Sthenos ${{ github.event.inputs.tag_name }}"
        fi
        echo "release_name=$RELEASE_NAME" >> $GITHUB_OUTPUT
        
        # Get architecture and tool counts
        TOOL_COUNT=$(find final-release -name "*.tar.gz" | wc -l)
        TOTAL_SIZE=$(du -sh final-release/ | cut -f1)
        
        cat > release_notes.md << EOF
        # üöÄ Sthenos Embedded Toolkit ${{ github.event.inputs.tag_name }}
        
        Static debugging and analysis tools for embedded systems across 40+ architectures.
        
        ## üì¶ Release Information
        
        - **Release Type**: ${{ github.event.inputs.release_type }}
        - **Build Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')  
        - **Commit**: ${{ github.sha }}
        - **Archives**: $TOOL_COUNT architecture-specific packages
        - **Total Size**: ~$TOTAL_SIZE
        
        ## üõ†Ô∏è Tools Included
        
        **Analysis & Debugging**: strace, ltrace, ply, gdbserver, tcpdump, nmap
        **Network Tools**: socat, ncat, dropbear (SSH), can-utils
        **System Tools**: bash, busybox, shell utilities  
        **LD_PRELOAD Libraries**: libdesock, shell tools, tls-noverify
        
        ## üèóÔ∏è Quick Start
        
        1. **Download**: Get the archive for your target architecture
        2. **Extract**: \`tar -xzf sthenos-<arch>.tar.gz\`
        3. **Test**: \`./output/<arch>/custom\` (should show banner)  
        4. **Use**: \`./output/<arch>/<tool>\`
        
        ## ‚ö° Architecture Testing
        
        **Always test compatibility first:**
        
        \`\`\`bash
        # Test if architecture works on your target
        ./output/<arch>/custom
        \`\`\`
        
        - ‚úÖ **Banner displays** ‚Üí Architecture is compatible, other tools should work
        - ‚ùå **"Illegal instruction"** ‚Üí Try different architecture variants (see guide below)
        
        ## üîß Common Architecture Issues
        
        If you get "Illegal instruction" errors, try these alternatives:
        
        | Your System | Try These Architectures |
        |-------------|------------------------|
        | ARM (soft-float) | arm32v5le, arm32v7le |
        | ARM (hard-float) | arm32v5lehf, arm32v7lehf, armv6 |
        | MIPS (any issues) | mips32besf, mips32lesf (soft-float variants) |
        | Old x86 systems | i486 (maximum compatibility) |
        | PowerPC issues | ppc32besf (soft-float) |
        
        ## üîê Verification
        
        All downloads include SHA256 checksums for verification:
        
        \`\`\`bash
        # Verify individual files
        sha256sum -c sthenos-<arch>.tar.gz.sha256
        
        # Verify all files at once  
        sha256sum -c CHECKSUMS.sha256
        \`\`\`
        
        ## üìñ Documentation
        
        - **[Architecture Guide](https://github.com/${{ github.repository }}/wiki/Architecture-Guide)** - Complete compatibility matrix
        - **[Tools Reference](https://github.com/${{ github.repository }}/wiki/Tools-Reference)** - Detailed tool documentation
        - **[Troubleshooting](https://github.com/${{ github.repository }}/wiki/Troubleshooting)** - Fix common issues
        - **[Examples](https://github.com/${{ github.repository }}/wiki/Examples)** - Usage examples
        
        ## üêõ Support
        
        - **Issues**: [GitHub Issues](https://github.com/${{ github.repository }}/issues)
        - **Wiki**: [Full Documentation](https://github.com/${{ github.repository }}/wiki)
        
        ---
        
        **Note**: All binaries are statically linked and require zero dependencies.
        EOF
        
        echo "Generated release notes with $TOOL_COUNT packages"

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ github.event.inputs.tag_name }}
        name: ${{ steps.release_notes.outputs.release_name }}
        body_path: release_notes.md
        files: final-release/*
        draft: ${{ github.event.inputs.draft }}
        prerelease: ${{ github.event.inputs.prerelease }}
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Release summary
      run: |
        echo "## üéâ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Release**: ${{ steps.release_notes.outputs.release_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Tag**: ${{ github.event.inputs.tag_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Type**: ${{ github.event.inputs.release_type }}" >> $GITHUB_STEP_SUMMARY
        echo "**Draft**: ${{ github.event.inputs.draft }}" >> $GITHUB_STEP_SUMMARY
        echo "**Prerelease**: ${{ github.event.inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìÅ Assets" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        ls -la final-release/ >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**üîó Release URL**: https://github.com/${{ github.repository }}/releases/tag/${{ github.event.inputs.tag_name }}" >> $GITHUB_STEP_SUMMARY