name: Build Single Tool/Architecture

on:
  workflow_dispatch:
    inputs:
      tool:
        description: 'Tool to build (e.g., strace, busybox, etc.)'
        required: true
        type: choice
        options:
          - strace
          - busybox
          - busybox_nodrop
          - bash
          - socat
          - socat-ssl
          - ncat
          - ncat-ssl
          - tcpdump
          - gdbserver
          - nmap
          - ply
          - dropbear
          - can-utils
          - shell-static
          - ltrace
          - custom
          - custom-glibc
          - libdesock
          - tls-noverify
          - shell-bind
          - shell-env
          - shell-helper
          - shell-reverse
          - shell-fifo
      architecture:
        description: 'Architecture to build for'
        required: true
        type: choice
        options:
          - aarch64
          - aarch64_be
          - arm32v5le
          - arm32v5lehf
          - arm32v7le
          - arm32v7lehf
          - armeb
          - armebhf
          - armel
          - armelhf
          - armv5l
          - armv5lhf
          - armv6
          - armv6sf
          - armv7m
          - armv7r
          - i486
          - ix86le
          - x86_64
          - m68k
          - microblaze
          - microblazeel
          - mips32be
          - mips32le
          - mips32besf
          - mips32lesf
          - mips64
          - mips64le
          - mips64n32
          - mips64n32el
          - mipsn32
          - mipsn32el
          - or1k
          - ppc32be
          - ppc32besf
          - ppc64le
          - powerpc64
          - powerpcle
          - powerpclesf
          - riscv32
          - riscv64
          - s390x
          - sh2
          - sh2eb
          - sh4
          - sh4eb
          - sparc64
      debug_mode:
        description: 'Enable debug mode (verbose output)'
        required: false
        default: false
        type: boolean

jobs:
  build-single:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Free up disk space
      run: |
        sudo rm -rf /usr/share/dotnet
        sudo rm -rf /usr/local/lib/android
        sudo rm -rf /opt/ghc
        sudo rm -rf /opt/hostedtoolcache/CodeQL
        sudo docker image prune --all --force
        df -h

    - name: Build required Docker images
      run: |
        echo "Building Docker images..."
        
        # Determine which container is needed based on tool
        case "${{ github.event.inputs.tool }}" in
          ltrace)
            echo "Building glibc static container for ltrace"
            docker build -t sthenos-glibc-static-builder -f Dockerfile.glibc-static .
            ;;
          libdesock|tls-noverify|shell-bind|shell-env|shell-helper|shell-reverse|shell-fifo)
            echo "Building glibc container for preload libraries"
            docker build -t sthenos-glibc-builder -f Dockerfile.glibc .
            ;;
          *)
            echo "Building musl container for standard tools"
            docker build -t sthenos-musl-builder -f Dockerfile.musl .
            ;;
        esac

    - name: Build tool
      run: |
        TOOL="${{ github.event.inputs.tool }}"
        ARCH="${{ github.event.inputs.architecture }}"
        DEBUG_FLAG=""
        
        if [ "${{ github.event.inputs.debug_mode }}" = "true" ]; then
          DEBUG_FLAG="-d"
        fi
        
        echo "Building $TOOL for $ARCH"
        echo "Debug mode: ${{ github.event.inputs.debug_mode }}"
        
        # Set timeout based on tool complexity
        case "$TOOL" in
          nmap|bash|dropbear)
            TIMEOUT="20m"
            ;;
          can-utils)
            TIMEOUT="15m" 
            ;;
          *)
            TIMEOUT="10m"
            ;;
        esac
        
        echo "Using timeout: $TIMEOUT"
        
        # Build the tool
        if timeout $TIMEOUT ./build $DEBUG_FLAG $TOOL --arch $ARCH; then
          echo "✅ Build successful for $TOOL/$ARCH"
        else
          echo "❌ Build failed or timed out for $TOOL/$ARCH"
          
          # Show build logs if available
          LOG_FILE="logs/build_${TOOL}_${ARCH}.log"
          if [ -f "$LOG_FILE" ]; then
            echo "=== Last 50 lines of build log ==="
            tail -50 "$LOG_FILE"
          fi
          
          exit 1
        fi

    - name: Verify build
      run: |
        TOOL="${{ github.event.inputs.tool }}"
        ARCH="${{ github.event.inputs.architecture }}"
        
        # Check if binary was created
        case "$TOOL" in
          libdesock|tls-noverify|shell-bind|shell-env|shell-helper|shell-reverse|shell-fifo)
            # Preload libraries
            BINARY_PATH="output-preload/glibc/$ARCH/$TOOL.so"
            ;;
          can-utils)
            # CAN utilities create a directory
            BINARY_PATH="output/$ARCH/can-utils/"
            ;;
          *)
            # Regular tools
            BINARY_PATH="output/$ARCH/$TOOL"
            ;;
        esac
        
        echo "Checking for binary at: $BINARY_PATH"
        
        if [ -f "$BINARY_PATH" ] || [ -d "$BINARY_PATH" ]; then
          echo "✅ Binary created successfully"
          
          if [ -f "$BINARY_PATH" ]; then
            echo "File info:"
            ls -lh "$BINARY_PATH"
            file "$BINARY_PATH"
            
            # Check if it's statically linked (for regular tools)
            case "$TOOL" in
              libdesock|tls-noverify|shell-bind|shell-env|shell-helper|shell-reverse|shell-fifo)
                echo "Shared library (expected)"
                ;;
              *)
                if ldd "$BINARY_PATH" 2>/dev/null | grep -q "not a dynamic executable"; then
                  echo "✅ Statically linked (good)"
                elif ldd "$BINARY_PATH" 2>/dev/null | grep -q "statically linked"; then
                  echo "✅ Statically linked (good)"
                else
                  echo "⚠️  May have dynamic dependencies:"
                  ldd "$BINARY_PATH" || true
                fi
                ;;
            esac
          else
            echo "Directory contents:"
            ls -la "$BINARY_PATH"
          fi
        else
          echo "❌ Binary not found at expected path"
          echo "Available outputs:"
          find output* -name "*$TOOL*" 2>/dev/null || true
          exit 1
        fi

    - name: Create artifact
      run: |
        TOOL="${{ github.event.inputs.tool }}"
        ARCH="${{ github.event.inputs.architecture }}"
        
        mkdir -p artifact
        
        case "$TOOL" in
          libdesock|tls-noverify|shell-bind|shell-env|shell-helper|shell-reverse|shell-fifo)
            # Preload libraries
            if [ -d "output-preload" ]; then
              cp -r output-preload artifact/
              echo "Created artifact with preload libraries"
            fi
            ;;
          *)
            # Regular tools
            if [ -d "output/$ARCH" ]; then
              mkdir -p "artifact/output"
              cp -r "output/$ARCH" "artifact/output/"
              echo "Created artifact with $TOOL for $ARCH"
            fi
            ;;
        esac
        
        # Also include build logs
        if [ -d "logs" ]; then
          cp -r logs artifact/
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: sthenos-${{ github.event.inputs.tool }}-${{ github.event.inputs.architecture }}
        path: artifact/
        retention-days: 7

    - name: Build summary
      run: |
        TOOL="${{ github.event.inputs.tool }}"
        ARCH="${{ github.event.inputs.architecture }}"
        
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Tool**: $TOOL" >> $GITHUB_STEP_SUMMARY
        echo "- **Architecture**: $ARCH" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ✅ Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Debug Mode**: ${{ github.event.inputs.debug_mode }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifact Contents" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find artifact -type f | head -20 >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY